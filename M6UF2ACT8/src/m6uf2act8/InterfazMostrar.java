/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package m6uf2act8;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.TypedQuery;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jaade
 */
public class InterfazMostrar extends javax.swing.JFrame {

    /**
     * Creates new form InterfazMostrar
     */
    public InterfazMostrar() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        MostrarVehicles = new javax.swing.JButton();
        MostrarPropietaris = new javax.swing.JButton();
        BtnSalir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Resultat"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        MostrarVehicles.setText("Mostar Vehicles");
        MostrarVehicles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MostrarVehiclesActionPerformed(evt);
            }
        });

        MostrarPropietaris.setText("Mostrar Propietaris");
        MostrarPropietaris.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MostrarPropietarisActionPerformed(evt);
            }
        });

        BtnSalir.setText("Sortir");
        BtnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(MostrarPropietaris, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(MostrarVehicles, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BtnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(49, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MostrarVehicles, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MostrarPropietaris, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MostrarVehiclesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MostrarVehiclesActionPerformed
         // Open a database connection
        // (create a new database if it doesn't exist yet):
        EntityManagerFactory emf =
            Persistence.createEntityManagerFactory("$objectdb/db/p2.odb");
        EntityManager em = emf.createEntityManager();
        
        // Retrieve all the Point objects from the database:
        TypedQuery<vehicle> query =
            em.createQuery("SELECT v FROM vehicle v", vehicle.class);
        List<vehicle> results = query.getResultList();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        // borrem les files de la taula
        model.setRowCount(0);

        // Mostrem cada resultat obtingut
        for (vehicle v : results) {
            
            model.addRow(new Object[]{v});
        } 
        
        // Close the database connection:
        em.close();
        emf.close();
    }//GEN-LAST:event_MostrarVehiclesActionPerformed

    private void MostrarPropietarisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MostrarPropietarisActionPerformed
        // TODO add your handling code here:
        EntityManagerFactory emf =
            Persistence.createEntityManagerFactory("$objectdb/db/p2.odb");
        EntityManager em = emf.createEntityManager();
        
        // Retrieve all the Point objects from the database:
        TypedQuery<propietari> query =
            em.createQuery("SELECT p FROM propietari p", propietari.class);
        List<propietari> results = query.getResultList();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        // borrem les files de la taula
        model.setRowCount(0);

        // Mostrem cada resultat obtingut
        for (propietari p : results) {
            
            model.addRow(new Object[]{p});
        } 
        
        // Close the database connection:
        em.close();
        emf.close();
    }//GEN-LAST:event_MostrarPropietarisActionPerformed

    // Tornem al jframe inicial
    private void BtnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnSalirActionPerformed
        this.setVisible(false);
        Interfaz interfaz = new Interfaz();
        interfaz.setVisible(true);
    }//GEN-LAST:event_BtnSalirActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnSalir;
    private javax.swing.JButton MostrarPropietaris;
    private javax.swing.JButton MostrarVehicles;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
